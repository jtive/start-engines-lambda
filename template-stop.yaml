AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stop ECS Tasks Lambda - Stops all running ECS tasks and deregisters from target groups

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name
  
  # Network Configuration
  TaskSubnets:
    Type: CommaDelimitedList
    Description: Comma-separated list of subnet IDs for ECS tasks
  
  TaskSecurityGroups:
    Type: CommaDelimitedList
    Description: Comma-separated list of security group IDs for ECS tasks
  
  # Target Group ARNs
  UsersTargetGroupArn:
    Type: String
    Description: Target Group ARN for UserManagement service
    Default: ""
  
  BatchTargetGroupArn:
    Type: String
    Description: Target Group ARN for BatchEngineCall service
    Default: ""

Globals:
  Function:
    Timeout: 300  # 5 minutes
    MemorySize: 256
    Runtime: python3.12
    Architectures:
      - x86_64

Resources:
  # Stop Lambda Function
  StopEnginesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub stop-engines-lambda-${Environment}
      CodeUri: .
      Handler: stop_engines_lambda.lambda_handler
      Description: Stops all ECS tasks and deregisters from target groups
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          
          # Network configuration
          SUBNETS: !Join [',', !Ref TaskSubnets]
          SECURITY_GROUPS: !Join [',', !Ref TaskSecurityGroups]
          
          # ECS Clusters (match start-engines config)
          AUTH_CLUSTER: authapi-cluster
          PDF_CLUSTER: pdfcreator-cluster
          FA_CLUSTER: fa-engine-cluster
          USERS_CLUSTER: user-management-cluster
          BATCH_CLUSTER: batch-engine
          
          # Target Group ARNs
          USERS_TARGET_GROUP_ARN: !Ref UsersTargetGroupArn
          BATCH_TARGET_GROUP_ARN: !Ref BatchTargetGroupArn
          
          # Configuration
          LAUNCH_TYPE: FARGATE
          LOG_LEVEL: INFO
      
      Role: !GetAtt StopLambdaExecutionRole.Arn
      
      # EventBridge trigger (optional - for scheduled stops)
      Events:
        StopTasksEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - custom.app
              detail-type:
                - Stop ECS Tasks
        # Uncomment to enable scheduled shutdown (e.g., every night at 8 PM)
        # ScheduledStop:
        #   Type: Schedule
        #   Properties:
        #     Schedule: cron(0 20 * * ? *)  # 8 PM UTC daily
        #     Description: Stop all ECS tasks nightly
        #     Enabled: false
  
  # Lambda Execution Role
  StopLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub stop-engines-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSStopTasks
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECSTaskManagement
                Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:StopTask
                Resource: '*'
              
              - Sid: TargetGroupDeregistration
                Effect: Allow
                Action:
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetHealth
                Resource:
                  - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/unified-auth-tg/*'
                  - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/unified-pdf-tg/*'
                  - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/unified-fa-tg/*'
                  - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/users-tg/*'
                  - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/batch-tg/*'
              
              - Sid: EC2NetworkInterface
                Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource: '*'
  
  # CloudWatch Log Group
  StopLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/stop-engines-lambda-${Environment}
      RetentionInDays: 30

Outputs:
  StopEnginesFunctionArn:
    Description: ARN of the Stop Lambda function
    Value: !GetAtt StopEnginesFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-StopFunctionArn
  
  StopLambdaExecutionRoleArn:
    Description: ARN of the Stop Lambda execution role
    Value: !GetAtt StopLambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-StopRoleArn

